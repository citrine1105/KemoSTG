@startuml
title クラス図
package Interface {
	interface Initialization{
		+virtual void Initialize() = 0
		+virtual void Finalize() = 0
	}

	interface Activity {
		+virtual void Update() = 0
		+virtual void Draw() = 0
	}
}

package Vector {
	class Vector2D {
		#double StartX
		#double StartY
		#double ElementX
		#double ElementY
		+Vector2D()
		+Vector2D(double StartX, double StartY)
		+double GetVectorMagnitude()
		+void SetStartPoint(double StartX, double StartY)
		+void SetStartPoint(Vector2D Vector)
		+void SetEndPoint(double EndX, double EndY)
		+void SetEndPoint(Vector2D Vector)
		+void SetElement(double ElementX, double ElementY)
		+void SetPolarForm(double Angle, double Magnitude)
		+void SetAngle(double Angle)
		+void SetMagnitude(double Magnitude)
		+void MoveStartPoint(double StartX, double StartY)
		+void AddElement(double ElementX, double ElementY)
		+void AddAngle(double Angle)
		+void AddMagnitude(double Magnitude)
		+void GetStartPoint(double *StartX, double *StartY);
		+void GetEndPoint(double *StartX, double *StartY)
		+void GetElement(double *ElementX, double *ElementY)
		+double GetAngle()
		+virtual double GetMagnitude()
		+Vector2D GetVectorToVector(Vector2D Vector)
		+Vector2D GetVectorStartPointToEndPoint(Vector2D Vector)
		+Vector2D GetVectorEndPointToEndPoint(Vector2D Vector)
		+Vector2D operator + (Vector2D Vector)
		+Vector2D operator - (Vector2D Vector)
		+Vector2D operator * (double Value)
		+Vector2D operator / (double Value)
		+void operator += (Vector2D Vector)
		+void operator -= (Vector2D Vector)
		+void operator *= (double Value)
		+void operator /= (double Value)
		+virtual void Update()
		+virtual void Draw()
	}

	class Vector3D {
		#double StartZ
		#double ElementZ
		+void SetVectorElement(double ElementX, double ElementY, double ElementZ)
		+Vector3D GetTargetPointVector(Vector3D Vector)
		+void GetVectorElement(double *ElementX, double *ElementY, double *ElementZ)
		+void GetStartPoint(double *StartX, double *StartY, double *StartZ);
		+void Draw()
	}

	Activity <|-up-- Vector2D
	Vector2D <|-- Vector3D
}

package Bezier {
	class Bezier {
		#Timer Timer
		#unsigned short PascalTriangle[12][12]
		#double ElementX
		#double ElementY
		+Bezier()
		+Bezier(int Dimension)
		+void Reset()
		+void SetDimension(int Dimension)
		+void GetElement(double *ElementX, double *ElementY)
		+double GetElementX()
		+double GetElementY()
		+void Update() override
		+void Draw() override
	}

	Activity <|-- Bezier
}

package Easing {
	enum EasingFunction {
		+easeIn
		+easeOut
		+easeInOut
	}

	enum EasingType {
		+Linear
		+Sine
		+Quad
		+Cubic
		+Quart
		+Quint
		+Expo
		+Circ
		+Back
		+Elastic
		+Bounce		
	}

	class Easing {
		+double easeIn(eEasingType EasingType, double t, double TotalTime, double Max = 1.0, double Min = 0.0)
		+double easeOut(eEasingType EasingType, double t, double TotalTime, double Max = 1.0, double Min = 0.0)
		+double easeInOut(eEasingType EasingType, double t, double TotalTime, double Max = 1.0, double Min = 0.0)
	}
}

package Sprite {
	class Sprite {
		#double PositionX
		#double PositionY
		#Vector2D MoveVector
		#Timer DelayTimer
		#EasingFunction EaseFunc
		#EasingType
		+void Move()
		+void MoveToPoint(double X, double Y, int DelayTime, EasingType Type, EasingFunction EasingFunction)
		+void Stop()
		+Vector2D GetVector()
		+virtual void Initialize()
		+virtual void Finalize()
		+virtual void Update()
		+virtual void Draw()
	}

	Initialization <|--- Sprite
	Activity <|--- Sprite
	Easing *.. Sprite
}

package Dialog {
	enum ButtonState {
		+Off
		+On
		+Hover
	}

	enum DialogIcon {
		+Information
		+Question
		+Exclamation
		+Error
		+Wait
		+None
	}

	class Dialog {
		#StringResource Message
		#DialogIcon Icon
		#DefaultButton
		#bool Active
		#void ButtonDraw(std::string Message, ButtonState State)
		+Dialog()
		+Dialog(std::string Text)
		+void Initialize()
		+void Initialize(StringResource Message, DialogIcon Icon, DefaultButton)
		+void Finalize()
		+void Show()
		+void Hide()
		+void Update()
		+virtual void Draw()
	}

	class OKDialog {
		#bool Decide
		+void Draw()
	}

	class TimerDialog {
		#Timer Timer
		+void SetHideTime(double Time)
	}

	class YesNoDialog {
		#int Cursor
		+void SetDefaultState()
		+int GetSelectState()
		+void Draw()
	}

	class WordDialog {
		+void Draw()
	}

	class ResolutionChangeDialog {
		+void Draw()
	}

	Initialization <|-up-- Dialog
	Activity <|-up-- Dialog
	Dialog <|-- TimerDialog
	Dialog <|-- OKDialog
	Dialog <|-- YesNoDialog
	TimerDialog <|-- WordDialog
	TimerDialog <|-- ResolutionChangeDialog
	YesNoDialog <|-- ResolutionChangeDialog
}

package Timer {
	enum CountMode {
		+CountUp
		+CountDown
		+Loop
	}

	class Timer {
		#int Value
		#int DefaultValue
		#bool Active
		#bool CountDown
		#bool Loop
		+Timer()
		+Timer(int Value)
		+Timer(double Second)
		+Timer(int Value, CountMode CountMode)
		+Timer(double Second, CountMode CountMode)
		+void SetValue(int Value)
		+void SetSecond(double Second)
		+void SetDefaultValue(int Value)
		+void SetCountMode(CountMode Mode)
		+void EnableCountLoop(bool Flag)
		+int GetValue()
		+double GetSecond()
		+int GetDefaultValue()
		+bool GetActiveFlag()
		+void Start()
		+void Stop()
		+void Reset()
		+void Update()
		+virtual void Draw()
	}

	class BossTimer {
		+void Draw()
	}

	class SelectTimer {
		+void Draw()
		+void Draw(int X, int Y)
	}

	Activity <|-left-- Timer
	Timer <|-- BossTimer
	Timer <|-- SelectTimer
}

package Pad {
	enum ButtonAssign {
		+Shot
		+Bomb
		+Laser
		+Possess
		+Pause
		+Credit
		+Service
		+TotalNum
	}

	enum DPadAssign {
		+Up
		+Down
		+Left
		+Right
		+TotalNum
	}

	enum DirectInputDPadAssign {
		+XAxis
		+YAxis
		+ZAxis
		+XRota
		+YRota
		+ZRota
		+POV1
		+POV2
		+POV3
		+POV4
		+None
	}

	enum XInputDPadAssign {
		+LeftStick
		+RightStick
		+DPad
		+None
	}

	class Pad {
		#int PadNumber
		#bool Vibration
		#int KeyInputButtonAssign[ButtonAssign.TotalNum]
		#int XInputButtonAssign[ButtonAssign.TotalNum]
		#int DirectInputButtonAssign[ButtonAssign.TotalNum]
		#int KeyInputDPadAssign[DPadAssign.TotalNum]
		#DirectInputDPadAssign DirectInputDPadAssign[DPadAssign.TotalNum][3]
		#XInputDPadAssign XInputDPadAssign[3]
		+void SetButtonAssign(ButtonAssign Assign)
		+void Initialize()
		+void Finalize()
		+void Update()
		+void Draw()
	}

	Initialization <|--- Pad
	Activity <|--- Pad
}

package Player {
	enum PlayerCharacter {
		+Power
		+Maria
		+None
	}

	class Player {
		#PlayerCharacter Character
		#Timer InvincibleTime
		#char Life
		+void Initialize()
		+void Finalize()
		+void Update()
		+void Draw()
	}

	Sprite <|-- Player
}

package Enemy {
	class Enemy {
		#int HP
		#Timer Timer
	}

	class BossEnemy {
		#BossTimer Timer
	}

	Sprite <|-- Enemy
	Enemy <|-- BossEnemy
}

package Bullet {
	enum PlayerBulletType {

	}

	enum EnemyBulletType {

	}

	class Bullet {
		+void Update()
	}

	class PlayerBullet {
		+void Draw()
	}

	class EnemyBullet {
		+void Draw()
	}

	Sprite <|-- Bullet
	Bullet <|-- PlayerBullet
	Bullet <|-- EnemyBullet
}

package Scene {
	enum Scene{
		+Title
		+Menu
		+Game
		+Option
	}

	class Scene {
		#Pad Pad[2]
		+virtual void Initialize()
		+virtual void Finalize()
		+virtual void Update()
		+virtual void Draw()
	}

	Scene <|-- Title
	Scene <|-- Menu
	Scene <|-- Option
	Initialization <|--- Scene
	Activity <|--- Scene
}

package SceneManager {
	class SceneManager {
		Scene *Scene
		Scene NextScene
	}
}

package Game {
	enum GameMode {
		+Arcade
		+Novice
		+BossRush
	}

	enum GameRank {
		+VeryEasy
		+Easy
		+Normal
		+Hard
		+VeryHard
		+Hell
	}

	object ReplayHeader <<struct>> {
		+PlayerCharacter Player[2]
		+Name
		+Stage
		+unsigned int Score[2]
	}

	object PadInputState <<struct>> {
		+ButtonAssign Button
		+DPadAssign DPad
		+int PressStartFrame
		+unsigned short PressFrameLength
	}

	class Game {
		#Timer FrameTimer
		#Timer FrameDelayTimer
		#int FrameDelay
		#Player Player[2]
		#StringResource CharacterWord
		+virtual void Update()
		+virtual void Draw()
	}

	class Replay {
		#std::vector<PadInputState> Data
	}

	Scene <|-- Game
	Game <|-- StoryPlayback
	Game <|-- GameTitle
	Game <|-- Ranking
	Game <|-- CharacterSelect
	Game <|-- Instruction
	Game <|-- MainGame
	Game <|-- NameEntry
	MainGame <|-- Replay
	Replay <|-- Demonstration
}

package ImageResource {
	class ImageResource {
		#int Handle
		+void Load(TCHAR *FileName)
		+int GetHandle()
		+void Initialize()
		+void Finalize()
	}

	Initialization <|-left-- ImageResource
}

package StringResource {
	enum Language {
		+Japanese
		+English
	}

	class StringResource {
		#std::string String
		+std::string SetString(Language Language, char *String)
		+std::string GetString()
		+std::string GetString(Language Language)
		+void Initialize()
		+void Finalize()
	}

	Initialization <|-left-- StringResource
}

package CoinChute {
	class CoinChute {
		#unsigned int Coin
		#unsigned int Credit
		#int NeedsCoinToCredit
		+CoinChute()
		+CoinChute(int NeedCoinToCredit)
		+~CoinChute()
		+void SetNeedCoinTo1Credit(int Coin)
		+void UseCredit()
		+void AddCoin()
		+bool GetFreePlayFlag()
		+unsigned int GetCoin()
		+unsigned int GetCredit()
		+unsigned int GetNeedStartCoin()
		+int GetNeedCoinTo1Credit()
		+void Initialize()
		+void Finalize()
	}

	Initialization <|-left-- CoinChute
}
@enduml